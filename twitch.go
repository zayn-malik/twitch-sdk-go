// Package twitch provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.2 DO NOT EDIT.
package twitch

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

const (
	BearerAuthScopes              = "bearerAuth.Scopes"
	OAuth2ClientCredentialsScopes = "oAuth2ClientCredentials.Scopes"
)

// Defines values for UserBroadcasterType.
const (
	UserBroadcasterTypeAffiliate UserBroadcasterType = "affiliate"
	UserBroadcasterTypeEmpty     UserBroadcasterType = ""
	UserBroadcasterTypePartner   UserBroadcasterType = "partner"
)

// Defines values for UserType.
const (
	UserTypeAdmin     UserType = "admin"
	UserTypeEmpty     UserType = ""
	UserTypeGlobalMod UserType = "global_mod"
	UserTypeStaff     UserType = "staff"
)

// Pagination defines model for Pagination.
type Pagination struct {
	Cursor *string `json:"cursor,omitempty"`
}

// Segments defines model for Segments.
type Segments struct {
	Duration *int `json:"duration,omitempty"`
	Offset   *int `json:"offset,omitempty"`
}

// User defines model for User.
type User struct {
	// BroadcasterType User’s broadcaster type partner, affiliate, or empty
	BroadcasterType *UserBroadcasterType `json:"broadcaster_type,omitempty"`
	CreatedAt       *string              `json:"created_at,omitempty"`

	// Description User's channel description
	Description *string `json:"description,omitempty"`

	// DisplayName User's display name
	DisplayName *string `json:"display_name,omitempty"`
	Email       *string `json:"email,omitempty"`

	// Id User's ID
	Id *string `json:"id,omitempty"`

	// Login User's login name
	Login *string `json:"login,omitempty"`

	// OfflineImageUrl URL of the user's offline image
	OfflineImageUrl *string `json:"offline_image_url,omitempty"`

	// ProfileImageUrl URL of the user's profile image
	ProfileImageUrl *string `json:"profile_image_url,omitempty"`

	// Type User's type staff, admin, global_mod or empty
	Type      *UserType `json:"type,omitempty"`
	ViewCount *int      `json:"view_count,omitempty"`
}

// UserBroadcasterType User’s broadcaster type partner, affiliate, or empty
type UserBroadcasterType string

// UserType User's type staff, admin, global_mod or empty
type UserType string

// UserResponse defines model for UserResponse.
type UserResponse struct {
	Data *[]User `json:"data,omitempty"`
}

// Video defines model for Video.
type Video struct {
	// CreatedAt Date when the video was created.
	CreatedAt *string `json:"created_at,omitempty"`

	// Description Description of the video.
	Description *string `json:"description,omitempty"`
	Duration    *string `json:"duration,omitempty"`

	// Id ID of the video.
	Id       *string `json:"id,omitempty"`
	Language *string `json:"language,omitempty"`

	// PublishedAt Date when the video was published.
	PublishedAt *string   `json:"published_at,omitempty"`
	Segments    *Segments `json:"segments,omitempty"`

	// StreamId ID of the stream.
	StreamId     *string `json:"stream_id,omitempty"`
	ThumbnailUrl *string `json:"thumbnail_url,omitempty"`

	// Title Title of the video.
	Title *string `json:"title,omitempty"`
	Type  *string `json:"type,omitempty"`
	Url   *string `json:"url,omitempty"`

	// UserId ID of the user who owns video.
	UserId *string `json:"user_id,omitempty"`

	// UserLogin Login of the user who owns the video.
	UserLogin *string `json:"user_login,omitempty"`

	// UserName Display name corresponding to user_id.
	UserName  *string `json:"user_name,omitempty"`
	ViewCount *int    `json:"view_count,omitempty"`
	Viewable  *string `json:"viewable,omitempty"`
}

// VideoResponse defines model for VideoResponse.
type VideoResponse struct {
	Data       *[]Video    `json:"data,omitempty"`
	Pagination *Pagination `json:"pagination,omitempty"`
}

// GetUserParams defines parameters for GetUser.
type GetUserParams struct {
	// Id User id
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// Login User login name.
	Login    *string `form:"login,omitempty" json:"login,omitempty"`
	ClientId *string `json:"Client-Id,omitempty"`
}

// GetVideoParams defines parameters for GetVideo.
type GetVideoParams struct {
	// Id ID of video.
	Id *string `form:"id,omitempty" json:"id,omitempty"`

	// UserId ID of user who owns the video.
	UserId *string `form:"user_id,omitempty" json:"user_id,omitempty"`

	// GameId ID of the game the video is of.
	GameId *string `form:"game_id,omitempty" json:"game_id,omitempty"`

	// After The cursor used to get the next page of results. The Pagination object in the response contains the cursor s value.
	After *string `form:"after,omitempty" json:"after,omitempty"`

	// Before The cursor used to get the previous page of results. The Pagination object in the response contains the cursor s value.
	Before   *string `form:"before,omitempty" json:"before,omitempty"`
	ClientId *string `json:"Client-Id,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetUser request
	GetUser(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetVideo request
	GetVideo(ctx context.Context, params *GetVideoParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetUser(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetVideo(ctx context.Context, params *GetVideoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetVideoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetUserRequest generates requests for GetUser
func NewGetUserRequest(server string, params *GetUserParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Login != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "login", runtime.ParamLocationQuery, *params.Login); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.ClientId != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Client-Id", runtime.ParamLocationHeader, *params.ClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Client-Id", headerParam0)
	}

	return req, nil
}

// NewGetVideoRequest generates requests for GetVideo
func NewGetVideoRequest(server string, params *GetVideoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/videos")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Id != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "id", runtime.ParamLocationQuery, *params.Id); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UserId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "user_id", runtime.ParamLocationQuery, *params.UserId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.GameId != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "game_id", runtime.ParamLocationQuery, *params.GameId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.After != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "after", runtime.ParamLocationQuery, *params.After); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Before != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "before", runtime.ParamLocationQuery, *params.Before); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params.ClientId != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Client-Id", runtime.ParamLocationHeader, *params.ClientId)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Client-Id", headerParam0)
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetUser request
	GetUserWithResponse(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*GetUserResponse, error)

	// GetVideo request
	GetVideoWithResponse(ctx context.Context, params *GetVideoParams, reqEditors ...RequestEditorFn) (*GetVideoResponse, error)
}

type GetUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UserResponse
}

// Status returns HTTPResponse.Status
func (r GetUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetVideoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *VideoResponse
}

// Status returns HTTPResponse.Status
func (r GetVideoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetVideoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetUserWithResponse request returning *GetUserResponse
func (c *ClientWithResponses) GetUserWithResponse(ctx context.Context, params *GetUserParams, reqEditors ...RequestEditorFn) (*GetUserResponse, error) {
	rsp, err := c.GetUser(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserResponse(rsp)
}

// GetVideoWithResponse request returning *GetVideoResponse
func (c *ClientWithResponses) GetVideoWithResponse(ctx context.Context, params *GetVideoParams, reqEditors ...RequestEditorFn) (*GetVideoResponse, error) {
	rsp, err := c.GetVideo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetVideoResponse(rsp)
}

// ParseGetUserResponse parses an HTTP response from a GetUserWithResponse call
func ParseGetUserResponse(rsp *http.Response) (*GetUserResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UserResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetVideoResponse parses an HTTP response from a GetVideoWithResponse call
func ParseGetVideoResponse(rsp *http.Response) (*GetVideoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetVideoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest VideoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
